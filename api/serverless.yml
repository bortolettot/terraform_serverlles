service: api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: authorizerFunc
  
functions:
  register:
    role: ${ssm:${self:custom.stage}-register-iam-role}
    handler: register/handler.register
    environment:
      DYNAMODB_USERS: ${ssm:${self:custom.stage}-dynamodb-users-table}
    events:
      - httpApi:
          path: /${self:custom.stage}/users
          method: post

  login:
    role: ${ssm:${self:custom.stage}-login-iam-role}
    handler: login/handler.login
    environment:
      DYNAMODB_USERS: ${ssm:${self:custom.stage}-dynamodb-users-table}
      JWT_SECRET: ${ssm:${self:custom.stage}-jwt-secret}
      EMAIL_GSI: ${ssm:${self:custom.stage}-email-gsi}
    events:
      - httpApi:
          path: /${self:custom.stage}/login
          method: post

  create_booking:
    role: ${ssm:${self:custom.stage}-create-booking-iam-role}
    handler: create-booking/handler.create
    environment:
      DYNAMODB_BOOKINGS: ${ssm:${self:custom.stage}-dynamodb-bookings-table}
    events:
      - httpApi:
          path: /${self:custom.stage}/bookings
          method: post
          authorizer: 
            name: customAuthorizer
  
  authorizerFunc:
    handler: authorizer/handler.authorizer
    environment:
      JWT_SECRET: ${ssm:${self:custom.stage}-jwt-secret}
        
    

custom:
  stage: ${opt:stage, self:provider.stage}